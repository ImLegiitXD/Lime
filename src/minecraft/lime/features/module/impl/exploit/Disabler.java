package lime.features.module.impl.exploit;

import lime.core.Lime;
import lime.core.events.EventTarget;
import lime.core.events.Priority;
import lime.core.events.impl.EventMotion;
import lime.core.events.impl.EventPacket;
import lime.core.events.impl.EventUpdate;
import lime.core.events.impl.EventWorldChange;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.module.impl.world.Scaffold;
import lime.features.setting.impl.EnumProperty;
import lime.ui.notifications.Notification;
import lime.utils.other.ChatUtils;
import lime.utils.other.PacketSleepThread;
import lime.utils.other.PlayerUtils;
import lime.utils.other.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.util.BlockPos;
import org.apache.commons.lang3.RandomUtils;

import java.util.LinkedList;
import java.util.Queue;

public class Disabler extends Module {

    public Disabler() {
        super("Disabler", Category.EXPLOIT);
    }

    public final EnumProperty mode = new EnumProperty("Mode", this, "Erisium", "Erisium", "Rinaorc", "Ghostly_Movement", "BlocksMC", "Verus Experimental", "Verus Transaction", "Verus_Combat", "Watchdog Silent");

    private final Timer timer = new Timer();
    private final Queue<Packet<?>> packetQueue = new LinkedList<>();
    private boolean wait;
    @Override
    public void onEnable() {
        timer.reset();
        wait = true;
        if(mode.is("blocksmc")) {
            Lime.getInstance().getNotificationManager().getNotifications().removeIf(notification -> notification.getName().contains("Wait") && notification.getName().contains("disabler."));
            Lime.getInstance().getNotificationManager().addNotification("Wait 10 seconds before using the disabler.", 10, Notification.Type.INFORMATION);
        }
        packetQueue.clear();
    }

    @Override
    public void onDisable() {
        packetQueue.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate e) {
        if(mode.is("rinaorc")) {
            mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(0, 0, 0), 255, mc.thePlayer.getCurrentEquippedItem(), 0, 0, 0));
        }

        if(mode.is("Verus Transaction")) {
            if(timer.hasReached(9000)) {
                while(packetQueue.size() > 22) {
                    mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                }
                timer.reset();
            }
        }

        if(mode.is("blocksmc")) {
            if(timer.hasReached(10000)) {
                while(packetQueue.size() > 44) {
                    mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                }
                wait = false;
                timer.reset();
            }
            if(mc.thePlayer.ticksExisted % 35 == 0 && !wait) {
                Lime.getInstance().getNotificationManager().addNotification("You can now fly.", 1, Notification.Type.SUCCESS);
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY-11.725, mc.thePlayer.posZ, false));
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            }
        }
    }

    @EventTarget
    public void onWorldChange(EventWorldChange e) {
        packetQueue.clear();
        if(mode.is("blocksmc")) {
            Lime.getInstance().getNotificationManager().getNotifications().removeIf(notification -> notification.getName().contains("Wait") && notification.getName().contains("disabler."));
            Lime.getInstance().getNotificationManager().addNotification("Wait 10 seconds before using the disabler.", 10, Notification.Type.INFORMATION);
        }
        timer.reset();
        wait = true;
    }

    @EventTarget
    public void onPacket(EventPacket e) {
        if(mode.is("Verus Transaction")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                for (int i = 0; i < 4; i++) {
                    packetQueue.add(e.getPacket());
                }
                e.setCanceled(true);
            }
            if(e.getPacket() instanceof S08PacketPlayerPosLook) {
                S08PacketPlayerPosLook p = (S08PacketPlayerPosLook) e.getPacket();
                double x = p.getX() - mc.thePlayer.posX;
                double y = p.getY() - mc.thePlayer.posY;
                double z = p.getZ() - mc.thePlayer.posZ;
                double diff = Math.sqrt(x * x + y * y + z * z);
                if(diff < 8) {
                    e.setCanceled(true);
                    mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
                }
            }
        }

        if(mode.is("blocksmc")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                for (int i = 0; i < 8; i++) {
                    packetQueue.add(e.getPacket());
                }
                e.setCanceled(true);
            }
            if(e.getPacket() instanceof S08PacketPlayerPosLook && !wait) {
                S08PacketPlayerPosLook p = (S08PacketPlayerPosLook) e.getPacket();
                double x = p.getX() - mc.thePlayer.posX;
                double y = p.getY() - mc.thePlayer.posY;
                double z = p.getZ() - mc.thePlayer.posZ;
                double diff = Math.sqrt(x * x + y * y + z * z);
                if(diff < 8) {
                    e.setCanceled(true);
                    mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
                }
            }
            if(e.getPacket() instanceof C0BPacketEntityAction) {
                e.setCanceled(true);
            }
        }

        if(mode.is("watchdog silent")) {
            if(e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook && mc.thePlayer.ticksExisted > 5) {
                e.setCanceled(true);
                C03PacketPlayer.C06PacketPlayerPosLook p = (C03PacketPlayer.C06PacketPlayerPosLook) e.getPacket();
                double x = p.getPositionX();
                double y = p.getPositionY();
                double z = p.getPositionZ();
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, p.onGround));
            }

            if((e.getPacket() instanceof C08PacketPlayerBlockPlacement && !Lime.getInstance().getModuleManager().getModuleC(Scaffold.class).isToggled()) || e.getPacket() instanceof C07PacketPlayerDigging) {
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
            }
        }

        if(mode.is("erisium")) {
            if(mc.thePlayer != null && mc.theWorld != null) {
                if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof S00PacketKeepAlive || e.getPacket() instanceof S32PacketConfirmTransaction) {
                    e.setCanceled(true);
                }
                if(e.getPacket() instanceof C00PacketKeepAlive) {
                    if(timer.hasReached(6000)) {
                        C00PacketKeepAlive packet = (C00PacketKeepAlive) e.getPacket();
                        mc.getNetHandler().sendPacketNoEvent(new C00PacketKeepAlive(packet.getKey()));
                        timer.reset();
                    }
                }

                if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();
                    if(timer.hasReached(6000)) {
                        mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), packet.getUid(), packet.accepted));
                        timer.reset();
                    }
                }
            }
        }

        if(mode.is("verus_combat")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C0BPacketEntityAction)
                e.setCanceled(true);
        }
    }

    @EventTarget(priority = Priority.LOW)
    public void onMotion(EventMotion e) {
        this.setSuffix(mode.getSelected());
        if(e.isPre() && mode.is("ghostly_movement")) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput());
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }
    }
}
