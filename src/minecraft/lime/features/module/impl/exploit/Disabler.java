package lime.features.module.impl.exploit;

import lime.core.Lime;
import lime.core.events.EventTarget;
import lime.core.events.Priority;
import lime.core.events.impl.EventMotion;
import lime.core.events.impl.EventPacket;
import lime.core.events.impl.EventUpdate;
import lime.core.events.impl.EventWorldChange;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.module.impl.combat.KillAura;
import lime.features.module.impl.world.Scaffold;
import lime.features.setting.impl.BooleanProperty;
import lime.features.setting.impl.EnumProperty;
import lime.ui.notifications.Notification;
import lime.utils.other.ChatUtils;
import lime.utils.other.PacketSleepThread;
import lime.utils.other.Timer;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import org.apache.commons.lang3.RandomUtils;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class Disabler extends Module {

    public Disabler() {
        super("Disabler", Category.EXPLOIT);
    }

    public final EnumProperty mode = new EnumProperty("Mode", this, "Erisium", "Erisium", "Verus", "Verus CDEGIK", "Kokscraft", "Cubecraft", "Rinaorc", "Ghostly_Movement", "BlocksMC", "New BMC", "Verus Transaction", "Verus_Combat");
    private final EnumProperty transacMode = new EnumProperty("Transaction Mode", this, "Delay", "Delay", "Dupe").onlyIf(mode.getSettingName(), "enum", "Verus Transaction");
    private final BooleanProperty flyBandF = new BooleanProperty("Fly B and F Disabler", this, true).onlyIf(mode.getSettingName(), "enum", "Verus CDEGIK");


    private final Timer timer = new Timer();
    private final LinkedList<Packet<?>> packetQueue = new LinkedList<>();
    private boolean wait, funny, receivedItems, disabled, b;
    public boolean among;
    @Override
    public void onEnable() {
        timer.reset();
        wait = true;
        funny = receivedItems = b = disabled = false;
        if(mode.is("verus") && !Lime.getInstance().DEV_MODE) {
            ChatUtils.sendMessage("no");
            toggle();
        }
        if(mode.is("blocksmc")) {
            Lime.getInstance().getNotificationManager().getNotifications().removeIf(notification -> notification.getName().contains("Wait") && notification.getName().contains("disabler."));
            Lime.getInstance().getNotificationManager().addNotification("Wait 10 seconds before using the disabler.", 10, Notification.Type.INFORMATION);
        }
        packetQueue.clear();
    }

    @Override
    public void onDisable() {
        packetQueue.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate e) {
        if(mode.is("rinaorc") || (mode.is("kokscraft") && Lime.getInstance().getModuleManager().getModuleC(Scaffold.class).isToggled())) {
            mc.getNetHandler().sendPacketNoEvent(new C02PacketUseEntity(null, C02PacketUseEntity.Action.ATTACK));
            //mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(0, 0, 0), 1, mc.thePlayer.getCurrentEquippedItem(), 0, 0.01f, 0));
        }

        if(mode.is("cubecraft") || mode.is("kokscraft")) {
            if(timer.hasReached(RandomUtils.nextInt(2400, 7400))) {
                while(!packetQueue.isEmpty()) {
                    mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                }
                timer.reset();
            }
        }

        if(mode.is("verus CDEGIK") || mode.is("new bmc")) {
            KillAura killAura = Lime.getInstance().getModuleManager().getModuleC(KillAura.class);
            if(!b && !(KillAura.getEntity() != null && killAura.isToggled() && killAura.cpsTimer.hasReached(1000 / killAura.cps.intValue())) && among) {
                mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1.5, mc.thePlayer.posZ), 1, new ItemStack(Items.water_bucket), 0, 0.94f, 0));
                mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1.5, mc.thePlayer.posZ), 1, new ItemStack(Blocks.stone.getItem(mc.theWorld, new BlockPos(-1, -1, -1))), 0, 0.94f, 0));
            }
            b = false;
            among = true;
        }

        if(mode.is("Verus Transaction")) {
            if(timer.hasReached(transacMode.is("delay") ? 18000 : 9000) && (wait || mode.is("dupe"))) {
                wait = false;
                while(packetQueue.size() > 22) {
                    mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                }
                timer.reset();
                if(mode.is("delay")) {
                    Lime.getInstance().getNotificationManager().addNotification("Disabled.", Notification.Type.SUCCESS);
                }
            }
        }

        if(mode.is("verus") && Lime.getInstance().DEV_MODE) {
            if(mc.thePlayer.ridingEntity instanceof EntityBoat && !funny) {
                mc.getNetHandler().sendPacketNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.DROP_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));
            }
        }
    }

    @EventTarget
    public void onWorldChange(EventWorldChange e) {
        packetQueue.clear();
        if(mode.is("blocksmc")) {
            Lime.getInstance().getNotificationManager().getNotifications().removeIf(notification -> notification.getName().contains("Wait") && notification.getName().contains("disabler."));
            Lime.getInstance().getNotificationManager().addNotification("Wait 10 seconds before using the disabler.", 10, Notification.Type.INFORMATION);
        }
        wait = true;
        funny = receivedItems = b = disabled = false;
        timer.reset();
    }

    @EventTarget
    public void onPacket(EventPacket e) {
        if(mode.is("watchdog")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction p = (C0FPacketConfirmTransaction) e.getPacket();
                if(p.getUid() < 0) {
                    packetQueue.add(p);
                    e.setCanceled(true);

                    if(timer.hasReached(120)) {
                        int i = 0;
                        while(packetQueue.size() > 0) {
                            mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                            ++i;
                        }
                        ChatUtils.sendMessage("Sent some fun packets :D (" + i + ")");
                        timer.reset();
                    }
                }
            }
        }

        if(mode.is("new bmc")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                packetQueue.add(e.getPacket());
                e.setCanceled(true);

                if(timer.hasReached(6000)) {
                    ChatUtils.sendMessage("Sent " + (packetQueue.size() - 44) + " packets");
                    while(packetQueue.size() > 44) {
                        mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                    }
                    timer.reset();
                }
            }

            if(e.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted > 30) {
                if(mc.thePlayer.ticksExisted % 50 == 0) {
                    e.setCanceled(true);
                    mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX+100, mc.thePlayer.posY, mc.thePlayer.posZ+100, false));
                }
            }

            if(e.getPacket() instanceof S08PacketPlayerPosLook && mc.thePlayer.ticksExisted > 30) {
                S08PacketPlayerPosLook s = (S08PacketPlayerPosLook) e.getPacket();
                double x = s.getX() - mc.thePlayer.posX;
                double y = s.getY() - mc.thePlayer.posY;
                double z = s.getZ() - mc.thePlayer.posZ;
                if (Math.sqrt(x * x + y * y + z * z) < 12) {
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(s.getX(), s.getY(), s.getZ(), s.getYaw(), s.getPitch(), true));
                    e.setCanceled(true);
                }
            }
        }

        if(mode.is("verus CDEGIK") || mode.is("new bmc")) {
            if(e.getPacket() instanceof C03PacketPlayer && !mc.thePlayer.onGround && Math.abs(mc.thePlayer.motionY) > 0.2 && (flyBandF.isEnabled() || mode.is("new bmc"))) {
                C03PacketPlayer originalPacket = (C03PacketPlayer) e.getPacket();
                if(originalPacket.isMoving()) {
                    if(originalPacket.getRotating()) {
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(originalPacket.getPositionX(), mc.thePlayer.ticksExisted % 2 == 0 ? (int) originalPacket.getPositionY() : originalPacket.getPositionY(), originalPacket.getPositionZ(), originalPacket.getYaw(), originalPacket.getPitch(), mc.thePlayer.ticksExisted % 2 == 0));
                    } else {
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(originalPacket.getPositionX(), mc.thePlayer.ticksExisted % 2 == 0 ? (int) originalPacket.getPositionY() : originalPacket.getPositionY(), originalPacket.getPositionZ(), mc.thePlayer.ticksExisted % 2 == 0));
                    }
                    e.setCanceled(true);
                }
            }

            if(e.getPacket() instanceof C02PacketUseEntity) {
                C02PacketUseEntity p = (C02PacketUseEntity) e.getPacket();
                if(p.getAction() == C02PacketUseEntity.Action.ATTACK) {
                    b = true;
                }
            }
        }
        if (mode.is("Verus Transaction")) {
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                if(mode.is("delay")) {
                    new PacketSleepThread(e.getPacket(), 18000).start();
                } else {
                    for (int i = 0; i < 4; i++) {
                        packetQueue.add(e.getPacket());
                    }
                }
                e.setCanceled(true);
            }
        }

        if ((mode.is("cubecraft") || mode.is("kokscraft")) && e.getPacket() instanceof C0FPacketConfirmTransaction) {
            packetQueue.add(e.getPacket());
            e.setCanceled(true);
        }

        if (mode.is("blocksmc")) {
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                for (int i = 0; i < 2; i++) {
                    new PacketSleepThread(e.getPacket(), 9000).start();
                }
                e.setCanceled(true);
            }
            if(mc.thePlayer.ticksExisted % 45 == 0 && e.getPacket() instanceof C03PacketPlayer) {
                Lime.getInstance().getNotificationManager().addNotification("You can now fly.", 1, Notification.Type.SUCCESS);
                e.setCanceled(true);
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY-11.725, mc.thePlayer.posZ, false));
            }
            if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
                S08PacketPlayerPosLook s = (S08PacketPlayerPosLook) e.getPacket();
                double x = s.getX() - mc.thePlayer.posX;
                double y = s.getY() - mc.thePlayer.posY;
                double z = s.getZ() - mc.thePlayer.posZ;
                if (Math.sqrt(x * x + y * y + z * z) < 8) {
                    new PacketSleepThread(new C03PacketPlayer.C06PacketPlayerPosLook(s.getX(), s.getY(), s.getZ(), s.getYaw(), s.getPitch(), true), 9000).start();
                    e.setCanceled(true);
                }
            }
        }

        if(mode.is("verus") && Lime.getInstance().DEV_MODE) {
            if(e.getPacket() instanceof C03PacketPlayer && receivedItems) {
                if(disabled) {
                    C03PacketPlayer p = (C03PacketPlayer) e.getPacket();
                    p.onGround = false;
                    e.setPacket(p);
                }
                if(mc.thePlayer.ridingEntity != null) {
                    mc.thePlayer.swingItem();
                    mc.getNetHandler().sendPacketNoEvent(new C02PacketUseEntity(mc.thePlayer.ridingEntity, C02PacketUseEntity.Action.ATTACK));
                    b = true;
                }

                if(mc.thePlayer.ridingEntity == null && b) {
                    funny = true;
                }
            }

            if(e.getPacket() instanceof S13PacketDestroyEntities) {
                S13PacketDestroyEntities p = (S13PacketDestroyEntities) e.getPacket();
                boolean boat = false;
                for (int entityID : p.getEntityIDs()) {
                    if(mc.theWorld.getEntityByID(entityID) instanceof EntityBoat) {
                        boat = true;
                    }
                }

                if(boat && p.getEntityIDs().length > 1) {
                    Lime.getInstance().getNotificationManager().addNotification("Disabled.", Notification.Type.SUCCESS);
                    disabled = true;
                }
            }
            if(e.getPacket() instanceof S0DPacketCollectItem) {
                if(((S0DPacketCollectItem) e.getPacket()).getEntityID() == mc.thePlayer.getEntityId()) {
                    receivedItems = true;
                }
            }
        }

        if(mode.is("erisium")) {
            if(mc.thePlayer != null && mc.theWorld != null) {
                if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof S00PacketKeepAlive || e.getPacket() instanceof S32PacketConfirmTransaction) {
                    e.setCanceled(true);
                }
                if(e.getPacket() instanceof C00PacketKeepAlive) {
                    if(timer.hasReached(6000)) {
                        C00PacketKeepAlive packet = (C00PacketKeepAlive) e.getPacket();
                        mc.getNetHandler().sendPacketNoEvent(new C00PacketKeepAlive(packet.getKey()));
                        timer.reset();
                    }
                }
                if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();
                    if(timer.hasReached(6000)) {
                        mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), packet.getUid(), packet.accepted));
                        timer.reset();
                    }
                }
            }
        }

        if (mode.is("verus_combat")) {
            if (e.getPacket() instanceof C0FPacketConfirmTransaction)
                e.setCanceled(true);
        }
    }

    @EventTarget(priority = Priority.LOW)
    public void onMotion(EventMotion e) {
        this.setSuffix(mode.getSelected());
        if(e.isPre() && mode.is("ghostly_movement")) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput());
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }
    }
}
