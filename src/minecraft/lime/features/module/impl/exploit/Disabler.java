package lime.features.module.impl.exploit;

import lime.bot.mc.protocol.packet.ingame.client.ClientChatPacket;
import lime.bot.mc.protocol.packet.ingame.client.player.ClientPlayerPositionRotationPacket;
import lime.bot.impl.Bot;
import lime.core.events.EventTarget;
import lime.core.events.impl.EventMotion;
import lime.core.events.impl.EventPacket;
import lime.core.events.impl.EventWorldChange;
import lime.features.commands.impl.Account;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.module.ModuleData;
import lime.features.setting.impl.EnumValue;
import lime.features.setting.impl.TextValue;
import lime.utils.other.ChatUtils;
import lime.utils.other.MathUtils;
import lime.utils.other.Timer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;

@ModuleData(name = "Disabler", category = Category.EXPLOIT)
public class Disabler extends Module {
    private final EnumValue mode = new EnumValue("Mode", this, "Erisium", "Erisium", "Ghostly_Movement", "Verus_Combat", "Mineplex_Combat", "Mineplex");
    private final TextValue mail = new TextValue("Mail", this, "").onlyIf(mode.getSettingName(), "enum", "Mineplex");
    private final TextValue password = new TextValue("Password", this, "").onlyIf(mode.getSettingName(), "enum", "Mineplex");

    private final Timer timer = new Timer();

    private Bot bot;

    @Override
    public void onEnable() {
        bot = null;
    }

    @EventTarget
    public void onWorldChange(EventWorldChange e) {
        if(e.getWorld() == null) {
            bot = null;
        }
    }

    @EventTarget
    public void onPacket(EventPacket e) {
        if(mode.is("erisium")) {
            if(mc.thePlayer != null && mc.theWorld != null) {
                if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof S00PacketKeepAlive || e.getPacket() instanceof S32PacketConfirmTransaction) {
                    e.setCanceled(true);
                }
                if(e.getPacket() instanceof C00PacketKeepAlive) {
                    if(timer.hasReached(6000)) {
                        C00PacketKeepAlive packet = (C00PacketKeepAlive) e.getPacket();
                        mc.getNetHandler().sendPacketNoEvent(new C00PacketKeepAlive(packet.getKey()));
                        timer.reset();
                    }
                }

                if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();
                    if(timer.hasReached(6000)) {
                        mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), packet.getUid(), packet.accepted));
                        timer.reset();
                    }
                }
            }
        }

        if(mode.is("verus_combat")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C0BPacketEntityAction)
                e.setCanceled(true);
        }

        if(mode.is("mineplex_combat") || mode.is("mineplex")) {
            if(e.getPacket() instanceof C00PacketKeepAlive) {
                C00PacketKeepAlive p = (C00PacketKeepAlive) e.getPacket();
                p.key = (int) MathUtils.random(0, Integer.MAX_VALUE);
                e.setPacket(p);
            }
        }

        if(mode.is("mineplex")) {
            if(e.getPacket() instanceof C03PacketPlayer) {
                if(bot == null) {
                    if(!Account.mail.equals("")) {
                        System.out.println(Account.mail + ":" + Account.pass);
                        bot = new Bot(Account.mail, Account.pass);
                        bot.startBot();
                    } else {
                        ChatUtils.sendMessage("Set alt with .spectator mail:pass");
                        this.toggle();
                    }
                    return;
                }

                if(bot.getPosition() != null) {
                    //bot.getClient().getSession().send(new ClientPlayerPositionPacket(false, packet.getPositionX(), packet.getPositionY(), packet.getPositionZ()));
                    //bot.setPosition(new Bot.Position(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ()));
                    double x = mc.thePlayer.posX;
                    double y2 = mc.thePlayer.posY;
                    double z = mc.thePlayer.posZ;
                    float yaw = mc.thePlayer.rotationYaw;
                    float pitch = mc.thePlayer.rotationPitch;

                    try {
                        bot.getClient().getPacketProtocol().getOutgoingId(ClientPlayerPositionRotationPacket.class);
                        if(mc.thePlayer.ticksExisted % 30 == 0) {
                            bot.getClient().getSession().send(new ClientChatPacket("/spec " + mc.session.getUsername()));
                        }
                        double posX = x - bot.getPosition().getX();
                        double posY = y2 - bot.getPosition().getY();
                        double posZ = z - bot.getPosition().getZ();
                        double xyz = Math.pow(posX, 2) + Math.pow(posY, 2) + Math.pow(posZ, 2);
                        if(Math.sqrt(xyz) < 40) {
                            bot.setPosition(new Bot.Position(x, y2, z));
                            bot.getClient().getSession().send(new ClientPlayerPositionRotationPacket(mc.thePlayer.onGround, x, y2, z, yaw, pitch));
                        }
                    } catch (Exception ignored) {}
                }

                /*if(position1.getXYZ() - position.getXYZ() < 20) {
                    bot.getClient().getSession().send(new ClientPlayerPositionPacket(false, packet.getPositionX(), packet.getPositionY(), packet.getPositionZ()));
                    bot.setPosition(new Bot.Position(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ()));
                } else {

                }*/
            }
        }
    }

    @EventTarget
    public void onMotion(EventMotion e) {
        this.setSuffix(mode.getSelected());
        if(e.isPre() && mode.is("ghostly_movement")) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput());
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }
    }
}
