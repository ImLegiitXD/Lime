package lime.features.module.impl.exploit;

import lime.core.events.EventTarget;
import lime.core.events.impl.EventMotion;
import lime.core.events.impl.EventPacket;
import lime.core.events.impl.EventUpdate;
import lime.core.events.impl.EventWorldChange;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.setting.impl.EnumValue;
import lime.utils.other.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.util.BlockPos;

import java.util.LinkedList;
import java.util.Queue;

public class Disabler extends Module {

    public Disabler() {
        super("Disabler", Category.EXPLOIT);
    }

    private final EnumValue mode = new EnumValue("Mode", this, "Erisium", "Erisium", "Rinaorc", "Ghostly_Movement", "Verus_Combat", "Watchdog Silent");

    private final Timer timer = new Timer();
    private final Queue<Packet<?>> packetQueue = new LinkedList<>();

    @Override
    public void onEnable() {
        timer.reset();
        packetQueue.clear();
    }

    @Override
    public void onDisable() {
        packetQueue.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate e) {
        if(mc.thePlayer.ticksExisted % 22 == 0 && !packetQueue.isEmpty() && packetQueue.size() >= 3 && mode.is("watchdog silent")) {
            mc.getNetHandler().sendPacketNoEvent(packetQueue.poll());
        }
        if(mode.is("rinaorc")) {
            mc.getNetHandler().sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(0, 0, 0), 255, mc.thePlayer.getCurrentEquippedItem(), 0, 0, 0));
            //mc.getNetHandler().sendPacketNoEvent(new C0APacketAnimation());
        }
    }

    @EventTarget
    public void onWorldChange(EventWorldChange e) {
        if(e.getWorld() == null) {
            if(mode.is("funcraft timer")) {
                packetQueue.clear();
            }
            packetQueue.clear();
        }
    }

    @EventTarget
    public void onPacket(EventPacket e) {

        if(mode.is("watchdog silent")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction p = (C0FPacketConfirmTransaction) e.getPacket();
                if(p.getUid() < 0) {
                    packetQueue.add(e.getPacket());
                    e.setCanceled(true);
                }
            }
            if(e.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer p = (C03PacketPlayer) e.getPacket();
                double x = mc.thePlayer.posX;
                double y = mc.thePlayer.posY;
                double z = mc.thePlayer.posZ;
                float yaw = mc.thePlayer.rotationYaw;
                float pitch = mc.thePlayer.rotationPitch;
                boolean ground = p.onGround;

                if (p.isMoving()) {
                    x = p.getPositionX();
                    y = p.getPositionY();
                    z = p.getPositionZ();
                }

                if (p.getRotating()) {
                    yaw = p.getYaw();
                    pitch = p.getPitch();
                }

                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, ground));
                e.setCanceled(true);
            }
        }

        if(mode.is("erisium")) {
            if(mc.thePlayer != null && mc.theWorld != null) {
                if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof S00PacketKeepAlive || e.getPacket() instanceof S32PacketConfirmTransaction) {
                    e.setCanceled(true);
                }
                if(e.getPacket() instanceof C00PacketKeepAlive) {
                    if(timer.hasReached(6000)) {
                        C00PacketKeepAlive packet = (C00PacketKeepAlive) e.getPacket();
                        mc.getNetHandler().sendPacketNoEvent(new C00PacketKeepAlive(packet.getKey()));
                        timer.reset();
                    }
                }

                if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();
                    if(timer.hasReached(6000)) {
                        mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), packet.getUid(), packet.accepted));
                        timer.reset();
                    }
                }
            }
        }

        if(mode.is("verus_combat")) {
            if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C0BPacketEntityAction)
                e.setCanceled(true);
        }
    }

    @EventTarget
    public void onMotion(EventMotion e) {
        this.setSuffix(mode.getSelected());
        if(e.isPre() && mode.is("ghostly_movement")) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput());
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }
    }
}
