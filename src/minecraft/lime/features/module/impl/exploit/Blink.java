package lime.features.module.impl.exploit;

import lime.core.events.EventTarget;
import lime.core.events.impl.Event3D;
import lime.core.events.impl.EventMotion;
import lime.core.events.impl.EventPacket;
import lime.features.module.Category;
import lime.features.module.Module;
import lime.features.setting.impl.SlideValue;
import lime.utils.other.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import org.lwjgl.opengl.GL11;

import java.util.ArrayList;

public class Blink extends Module {

    public Blink() {
        super("Blink", Category.EXPLOIT);
    }

    private final ArrayList<double[]> positions = new ArrayList<>();
    private final ArrayList<Packet<?>> packets = new ArrayList<>();
    private final SlideValue blinkDelay = new SlideValue("Blink Delay", this, 0, 1000, 500, 50);

    private final Timer delay = new Timer();

    @Override
    public void onEnable() {
        delay.reset();
        positions.clear();
    }

    @Override
    public void onDisable() {
        for (Packet<?> packet : packets) {
            mc.getNetHandler().sendPacketNoEvent(packet);
        }
        packets.clear();
        super.onDisable();
    }

    @EventTarget
    public void onMotion(EventMotion e) {
        e.setGround(true);
        if(!positions.contains(new double[]{mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ})) {
            positions.add(new double[]{mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ});
        }
        if(mc.thePlayer.ticksExisted % 20 == 0)
            mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer());

        if(delay.hasReached((int) blinkDelay.getCurrent()) && blinkDelay.getCurrent() != 0) {
            if(!packets.isEmpty()) {
                for (Packet<?> packet : packets) {
                    mc.getNetHandler().sendPacketNoEvent(packet);
                }
            }
            positions.clear();
            packets.clear();
            delay.reset();
        }
    }

    @EventTarget
    public void onPacket(EventPacket e) {
        if(e.getPacket() instanceof C03PacketPlayer || e.getPacket() instanceof C0BPacketEntityAction) {
            packets.add(e.getPacket());
            e.setCanceled(true);
        }
    }

    @EventTarget
    public void on3D(Event3D e) {
        GL11.glPushMatrix();
        GL11.glDisable(GL11.GL_TEXTURE_2D);
        GL11.glEnable(GL11.GL_LINE_SMOOTH);
        GL11.glDisable(GL11.GL_BLEND);
        GL11.glDisable(GL11.GL_DEPTH_TEST);

        GL11.glLineWidth(3f);

        GL11.glBegin(GL11.GL_LINE_STRIP);
        GL11.glColor4d(1, 1, 1, 1);
        for(double[] pos : positions) {
            GL11.glVertex3d(pos[0] - mc.getRenderManager().viewerPosX, pos[1] - mc.getRenderManager().viewerPosY, pos[2] - mc.getRenderManager().viewerPosZ);
        }
        GL11.glEnd();
        GL11.glEnable(GL11.GL_DEPTH_TEST);
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glDisable(GL11.GL_LINE_SMOOTH);
        GL11.glEnable(GL11.GL_TEXTURE_2D);
        GL11.glPopMatrix();
    }
}
